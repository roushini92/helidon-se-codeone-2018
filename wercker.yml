# This references an OpenJDK container from the
# Docker Hub https://hub.docker.com/_/openjdk/
# Read more about containers on our dev center
# https://devcenter.wercker.com/overview-and-core-concepts/containers/
box: openjdk:8-jdk

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# https://devcenter.wercker.com/development/pipelines/
build:
    # Steps make up the actions in your pipeline
    # Read more about steps on our dev center:
    # https://devcenter.wercker.com/development/steps/
  steps:
    # https://github.com/wercker/step-maven
    - script:
      name: import
      code: | 
          export _JAVA_OPTIONS=-Djdk.net.URLClassPath.disableClassPathURLCheck=true

    - wercker/maven:
      goals: clean install
      version: 3.5.4

    - wercker/maven:
      goals: package
      version: 3.5.4

push-release:
  steps:
    - script:
        name: prepare
        code: |
            ls -la
            #mv workshop-web /workshop-web
            ls -la 
    # The step above should leave us with a Kubernetes service and deployment yml files.
    # We'll create a directory to move them to.
    - script:
        name: Prepare Kubernetes files
        code: |
          cp -r target $WERCKER_OUTPUT_DIR/target

    - internal/docker-push:
        ports: "8080"
        working-dir: /pipeline/source
        cmd: java -jar target/quickstart-se.jar
        env: "CI=true"
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        repository: $DOCKER_REPO
        registry: https://iad.ocir.io/v2

deploy-to-kubernetes:
    box: python:2.7
    steps:
    # `apply` is a good command to use here, as it'll create Kubernetes entities if they are missing.- script:
    - script:
        name: prepare
        code: |
            ls -lra $WERCKER_OUTPUT_DIR/
            #mv workshop-web /workshop-web
          
    - kubectl:
        name: deploy to kubernetes
        cwd: target
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f app.yaml
